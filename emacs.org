* Start up

  Start with the scratch buffer; no start up screen.

  #+NAME: startup
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen +1)
  #+END_SRC
* Graphics and looks
** Font

   I like [[http://www.levien.com/type/myfonts/inconsolata.html][Inconsolata]], but it doesn't support a wide range of Unicode
   characters, so I fall back on [[http://dejavu-fonts.org/wiki/Main_Page][DejaVu Sans]] for those.

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil
                         :family "Inconsolata"
                         :height 140
                         :weight 'normal
                         :width 'normal)

     (when (functionp 'set-fontset-font)
       (set-fontset-font "fontset-default"
                         'unicode
                         (font-spec :family "DejaVu Sans Mono"
                                    :width 'normal
                                    :size 12.4
                                    :weight 'normal)))

   #+END_SRC

** Reduce clutter

   Remove the toolbar. It's ugly and I never use it. Also remove the
   scroll bars; below, I set up the fringe to show my position in a
   buffer.

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (when (window-system)
       (tool-bar-mode -1)
       (scroll-bar-mode -1))
     
     (menu-bar-mode -1)
     
   #+END_SRC

** Fringe decorations

   [[http://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
   buffer. Emacs lets you customize it of course.

   Here I set up git diffs and buffer position in the fringe.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (when (window-system)
       (require 'git-gutter-fringe))

     (global-git-gutter-mode +1)
     (setq-default indicate-buffer-boundaries 'left)
     (setq-default indicate-empty-lines +1)

   #+END_SRC
** Scrolling behavior

   Emacs's default scrolling behavior, like a lot of the default
   Emacs experience, is pretty idiosyncratic. The following snippet
   makes for a smoother scrolling behavior when using keyboard
   navigation.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (setq redisplay-dont-pause t
           scroll-margin 1
           scroll-step 1
           scroll-conservatively 10000
           scroll-preserve-screen-position 1
           scroll-error-top-bottom t)
   #+END_SRC

   This snippet makes mouse wheel and trackpad scrolling
   bearable. Scroll in 1-line increments the buffer under the mouse.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-follow-mouse 't)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
   #+END_SRC
* Company for auto complete

  #+NAME: auto-complete
  #+BEGIN_SRC emacs-lisp
    (company-mode)
    (add-hook 'after-init-hook 'global-company-mode)
  #+END_SRC
* Configuration file layout

  Here I define the emacs.el file that gets generated by the code in
  this org file.

  #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
    ;;;; Do not modify this file by hand.  It was automatically generated
    ;;;; from `emacs.org` in the same directory. See that file for more
    ;;;; information.
    ;;;;
    ;;;; If you cannot find the `emacs.org` file, see the source
    ;;;; repository at https://github.com/joodie/emacs-literal-config

    <<environment>>
    <<tools>>
    <<customize-config>>
    <<look-and-feel>>
    <<formatting>>
    <<auto-complete>>
    <<programming-setup>>
    <<global-keys>>
    <<global-navigation>>
    <<org-config>>
    <<startup>>
    <<custom-functions>>
  #+END_SRC
* Options set using the customize interface

  By default, Emacs saves the options you set via the `customize-*`
  functions in the user init file, which is "~/.emacs.d/init.el" in
  this setup. I prefer to have it put that data in a seperate file.

  #+name: customize-config
  #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file)
  #+END_SRC
* Backup settings

  #+name: customize-config
  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
  #+END_SRC

* Org mode
** Org-Babel

   Use syntax highlighting ("fontification") in org-mode source
   blocks, and use a slightly darker background to visually separate
   the source block from its surroundings.

   This also highlights source blocks in HTML exports.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively 't)
     (set-face-attribute 'org-block-background nil
                         :background "#f0f0e8")
   #+END_SRC
** Language evaluation support

   Org-Babel needs to be told that evaluation of certain languages is
   allowed. Start editing with C-c '

   #+name: org-config :noweb no-export
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)))
   #+END_SRC
* Programming
** Ruby
    #+NAME: programming-setup
    #+BEGIN_SRC emacs-lisp
      (push 'company-robe company-backends)
      (add-hook 'ruby-mode-hook 'robe-mode)
      (add-hook 'enh-ruby-mode-hook 'robe-mode)
    #+END_SRC
** Smartparens
    #+NAME: programming-setup
    #+BEGIN_SRC emacs-lisp
      (require 'smartparens-config)
      (smartparens-global-mode)
    #+END_SRC

* Custom functions
** Duplicate line  
  #+NAME: custom-functions
  #+BEGIN_SRC emacs-lisp
    (defun duplicate-line (arg)
      "Duplicate current line, leaving point in lower line."
      (interactive "*p")
    
      ;; save the point for undo
      (setq buffer-undo-list (cons (point) buffer-undo-list))
    
      ;; local variables for start and end of line
      (let ((bol (save-excursion (beginning-of-line) (point)))
            eol)
        (save-excursion
    
          ;; don't use forward-line for this, because you would have
          ;; to check whether you are at the end of the buffer
          (end-of-line)
          (setq eol (point))
    
          ;; store the line and disable the recording of undo information
          (let ((line (buffer-substring bol eol))
                (buffer-undo-list t)
                (count arg))
            ;; insert the line arg times
            (while (> count 0)
              (newline)         ;; because there is no newline in 'line'
              (insert line)
              (setq count (1- count)))
            )
    
          ;; create the undo information
          (setq buffer-undo-list (cons (cons eol (point))
          buffer-undo-list)))
        ) ; end-of-let
    
      ;; put the point in the lowest line and return
      (next-line arg))
  #+END_SRC

** Comment or uncomment current line
  #+NAME: custom-functions
  #+BEGIN_SRC emacs-lisp
    (defun comment-or-uncomment-region-or-line ()
        "Comments or uncomments the region or the current line if there's no active region."
        (interactive)
        (let (beg end)
            (if (region-active-p)
                (setq beg (region-beginning) end (region-end))
                (setq beg (line-beginning-position) end (line-end-position))
                (next-line))
            (comment-or-uncomment-region beg end)))
  #+END_SRC
* Global key bindings

  As far as reasonable, I try to keep my custom key bindings within
  the "official" restraints. Specifically, I want my global key
  bindings to start with =C-c [lower case letter]=.

  #+name: global-keys
  #+BEGIN_SRC emacs-lisp
    (global-set-key "\C-cg" 'magit-status)
    (global-set-key "\C-cd" 'duplicate-line)
    (global-set-key "\C-cc" 'comment-or-uncomment-region-or-line)
  #+END_SRC
* Global navigation
  #+name: global-navigation
  #+BEGIN_SRC emacs-lisp
    (ido-mode t)
    (setq ido-enable-flex-matching t)
    (ido-everywhere t)
    (flx-ido-mode t)
    (setq ido-use-faces nil)
    
    (smex-initialize)
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    ;; This is your old M-x.
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
    
    (global-set-key (kbd "C-c SPC") 'ace-jump-mode)
    
    (projectile-global-mode)
  #+END_SRC
